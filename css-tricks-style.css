.container {
  padding: 20px;
  border: 1px dashed black;
  background-color: #FAA;
}

.item {
  border: 1px solid black;
  padding: 40px;
  margin: 20px;
  background-color: #AAF;
}

/*************** Properties for the parent flex-container *******************/

/* Just by making the container a flex container, now the items inside become flex items. */
.flex-container {
  display: flex;
}

/* Making the flex-direction row-reverse on the flex-container lays the elements out right-to-left, which means the first element will appear on the right side of the container. */
.row-reverse {
  flex-direction: row-reverse;
}

/* If you want elements laid out top-to-bottom, the column flex-direction accomplishes this. */
.column {
  flex-direction: column;
}

/* If you make the flex-direction column-reverse, then the first item ends up on the bottom of the container and the last on the top. */
.column-reverse {
  flex-direction: column-reverse;
}

/* If there are too many flex-items to fit on a single vertical line, they will begin wrapping underneath that line. Depending on the flex-direction, they will either wrap from the right hand side (flex-direction: row (default)) or wrap from the left hand side (flex-direction: row-reverse) */
.wrap {
  flex-wrap: wrap;
}

/* If there are too many flex items to fit vertically on the page, they will begin wrapping ABOVE the current line. Depending on the flex-direction, they may wrap above and to the left (flex-direction: row) or above and to the right (flex-direction: row-reverse)*/
.wrap-reverse {
  flex-wrap: wrap-reverse;
}

/* The flex-flow property allows you to combine flex-direction and flex-wrap into one property. It's pretty self explanatory, no reason to go through every combination. */
.row-wrap {
  flex-flow: row wrap;
}

.row-reverse-wrap {
  flex-flow: row-reverse wrap;
}

/* > means to select all .item's where the parent has the class .justify-content. */
.justify-content > .item {
  margin: 0;
}

/* Remove the padding from the flex-container for the justify-content examples so we can see how justify-content adds space around elements. */
.justify-content {
  padding: 0;
}

/* Aligns the items one after the other starting from the left-hand side of the flex-container. No space is put between them. */
.flex-start {
  justify-content: flex-start;
}

/* Aligns the items one after the other starting from the right-hand side of the flex-container, no space is put between them. */
.flex-end {
  justify-content: flex-end;
}

/* Aligns the items in the center of the flex-container, but doesn't add any space around the individual items. */
.center {
  justify-content: center;
}

.space-between {
  justify-content: space-between;
}

.space-around {
  justify-content: space-around;
}

.space-evenly {
  justify-content: space-evenly;
}







